name: Update README last-updated

on:
  push:
    branches: [ main, master ]

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Skip if action itself triggered this run
        if: ${{ github.actor == 'github-actions' }}
        run: |
          echo "Triggered by github-actions. Exiting to avoid loop."
          exit 0

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update README timestamp
        env:
          TZ: 'Asia/Kolkata'
        run: |
          # determine README path
          README=README.md
          # fallback: check Setup folder location (customize if needed)
          if [ ! -f "$README" ]; then README=Setup/ReadMe-Softwares-List.md; fi
          if [ ! -f "$README" ]; then
            echo "README not found at expected paths. Exiting."
            exit 0
          fi

          # persist README path so later steps can use it
          echo "README determined as: $README"
          echo "README=$README" >> $GITHUB_ENV

          # compute new date (change format if you want date-only)
          NEW_DATE="$(date '+%Y-%m-%d %H:%M %z')"
          echo "Setting Last Updated â†’ $NEW_DATE in $README"

          # replace or insert the Last Updated marker
          if grep -q -E 'Last Updated:' "$README"; then
            sed -E -i "s#(Last Updated:).*#\1 \`$NEW_DATE\`#g" "$README"
          elif grep -q -E '##.*Last Updated' "$README"; then
            sed -E -i "s#(##.*Last Updated).*#\1 \`$NEW_DATE\`#g" "$README"
          else
            awk -v d="$NEW_DATE" 'NR==1{print; print ""; print "## ðŸ“… Last Updated: `" d "`"; next}1' "$README" > /tmp/README.tmp && mv /tmp/README.tmp "$README"
          fi

          git --no-pager diff -- "$README" || true

      - name: Commit & push if changed
        env:
          GIT_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_NAME: github-actions[bot]
        run: |
          # README variable is read from GITHUB_ENV (persisted earlier)
          echo "Using README path: '$README'"

          # safety: ensure README is set and file exists
          if [ -z "$README" ] || [ ! -f "$README" ]; then
            echo "README variable not set or file missing. Nothing to commit."
            exit 0
          fi

          git config user.email "$GIT_EMAIL"
          git config user.name "$GIT_NAME"

          # check if README changed (use basename to avoid false positives)
          if git status --porcelain | grep -q "$(basename "$README")"; then
            git add -- "$README"
            git commit -m "chore: update README Last Updated timestamp" || echo "No commit created"
            git push origin HEAD:${{ github.ref_name }}
          else
            echo "No changes in README - nothing to commit."
          fi
