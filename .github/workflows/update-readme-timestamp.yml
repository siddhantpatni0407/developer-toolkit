name: Update README last-updated

permissions:
  contents: write

on:
  push:
    branches: [ main, master ]

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Skip if action itself triggered this run
        if: ${{ github.actor == 'github-actions' }}
        run: |
          echo "Triggered by github-actions. Exiting to avoid loop."
          exit 0

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fill README "Repository Activity Snapshot" block (Python)
        env:
          TZ: 'Asia/Kolkata'
        run: |
          set -euo pipefail

          # 1) locate README (customize if needed)
          README="README.md"
          if [ ! -f "$README" ]; then
            README="Setup/ReadMe-Softwares-List.md"
          fi

          if [ ! -f "$README" ]; then
            echo "README not found at expected paths. Exiting."
            exit 0
          fi

          echo "Using README path: $README"

          # 2) Run single python script to collect metadata and safely update README
          python - <<'PY'
import os, re, subprocess, sys

readme = os.getenv("README", "README.md")

# Helper to run git cmd and fallback gracefully
def git(cmd):
    try:
        out = subprocess.check_output(["git"] + cmd, stderr=subprocess.DEVNULL).decode().strip()
        return out
    except Exception:
        return ""

# metadata (safe fallbacks)
new_date = subprocess.check_output(["date", "+%Y-%m-%d %H:%M %z"]).decode().strip() if os.name != "nt" else ""
repo = os.getenv("GITHUB_REPOSITORY", "")
# get branch: try git, else GITHUB_REF
branch = git(["rev-parse", "--abbrev-ref", "HEAD"]) or os.getenv("GITHUB_REF", "").replace("refs/heads/", "")
actor = os.getenv("GITHUB_ACTOR", "")
commit_sha = git(["rev-parse", "--short", "HEAD"]) or os.getenv("GITHUB_SHA", "")[:7]
commit_url = f"https://github.com/{repo}/commit/{commit_sha}" if repo and commit_sha else ""
# commit message
commit_msg = git(["log", "-1", "--pretty=%s"]) or ""
# compare url using SHA
gh_sha = os.getenv("GITHUB_SHA", "")
compare_url = f"https://github.com/{repo}/compare/{gh_sha}^...{gh_sha}" if repo and gh_sha else ""
run_id = os.getenv("GITHUB_RUN_ID", "")
run_num = os.getenv("GITHUB_RUN_NUMBER", run_id)
run_url = f"https://github.com/{repo}/actions/runs/{run_id}" if repo and run_id else ""

# Title and block we will insert
title_heading = "## 📋 Repository Activity Snapshot"
block = (
    f"{title_heading}\n"
    f"## 📅 Last Updated : `{new_date}`\n"
    f"## 📦 Repository : `{repo}`\n"
    f"## 🔀 Branch : `{branch}`\n"
    f"## 👤 Author : `{actor}`\n"
    f"## 📝 Commit Message : `{commit_msg.replace('`', \"'\")}`\n"
    f"## 🔗 Commit : [`{commit_sha}`]({commit_url})\n"
    f"## 📊 Compare : [View changes]({compare_url})\n"
    f"## ⚙️ Workflow Run : [Run #{run_num}]({run_url})\n\n"
    f"---\n"
)

# read file
with open(readme, "r", encoding="utf-8") as f:
    content = f.read()

# regex: find existing block starting with either title_heading or old "## 📅 Last Updated"
pattern = re.compile(r"(?:##\s*📋\s*Repository\s*Activity\s*Snapshot|##\s*📅\s*Last\s*Updated).*?(?=\n##\s|\Z)", re.S)
if pattern.search(content):
    new_content = pattern.sub(block.rstrip(), content, count=1)
else:
    # insert after first H1 if present, else prepend
    m = re.search(r"^# .*$", content, flags=re.M)
    if m:
        idx = m.end()
        new_content = content[:idx] + "\n\n" + block + content[idx:]
    else:
        new_content = block + "\n\n" + content

if new_content != content:
    with open(readme, "w", encoding="utf-8") as f:
        f.write(new_content)
    print("README updated.")
    sys.exit(0)
else:
    print("No changes required.")
    sys.exit(0)
PY

      - name: Commit & push if changed
        env:
          GIT_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_NAME: github-actions[bot]
        run: |
          set -euo pipefail

          echo "Checking for changes..."
          if git status --porcelain | grep -q README || git status --porcelain | grep -q "ReadMe-Softwares-List.md"; then
            git config user.email "$GIT_EMAIL"
            git config user.name "$GIT_NAME"
            git add --all
            git commit -m "chore: update README Repository Activity Snapshot" || echo "No commit created"
            git push origin HEAD:${{ github.ref_name }}
          else
            echo "No README changes to commit."
          fi
