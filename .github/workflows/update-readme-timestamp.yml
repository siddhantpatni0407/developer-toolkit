name: Update README last-updated

permissions:
  contents: write

on:
  push:
    branches: [ main, master ]

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Skip if action itself triggered this run
        if: ${{ github.actor == 'github-actions' }}
        run: |
          echo "Triggered by github-actions. Exiting to avoid loop."
          exit 0

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update README Last Updated table
        env:
          TZ: 'Asia/Kolkata'
        run: |
          set -euo pipefail

          # find README (customize if needed)
          README=README.md
          if [ ! -f "$README" ]; then README=Setup/ReadMe-Softwares-List.md; fi
          if [ ! -f "$README" ]; then
            echo "README not found at expected paths. Exiting."
            exit 0
          fi

          echo "README determined as: $README"
          echo "README=$README" >> $GITHUB_ENV

          # gather metadata
          NEW_DATE="$(date '+%Y-%m-%d %H:%M %z')"
          REPO="${GITHUB_REPOSITORY}"
          BRANCH="${GITHUB_REF_NAME:-$(echo ${GITHUB_REF} | sed 's#refs/heads/##')}"
          ACTOR="${GITHUB_ACTOR}"
          COMMIT_SHA="$(git rev-parse --short HEAD 2>/dev/null || echo ${GITHUB_SHA:0:7})"
          COMMIT_URL="https://github.com/${REPO}/commit/${COMMIT_SHA}"
          # commit message: try to read from git, otherwise from event payload
          COMMIT_MSG="$(git log -1 --pretty=%s 2>/dev/null || jq -r '.head_commit.message // ""' "$GITHUB_EVENT_PATH" 2>/dev/null || echo "")"
          # escape backticks in commit message for safe markdown embedding
          ESC_COMMIT_MSG="$(printf '%s' "$COMMIT_MSG" | sed 's/`/`'\"'\"'`/g')"
          COMPARE_URL="https://github.com/${REPO}/compare/${GITHUB_SHA}^...${GITHUB_SHA}"
          RUN_URL="https://github.com/${REPO}/actions/runs/${GITHUB_RUN_ID}"
          RUN_NUM="${GITHUB_RUN_NUMBER:-${GITHUB_RUN_ID}}"

          # write markdown table to temp file (variables will be expanded)
          cat > /tmp/details.md <<EOF
## 📅 Last Updated

| Field             | Details |
| ----------------- | ------- |
| 🗓️ Date/Time      | \`$NEW_DATE\` |
| 📦 Repository     | \`$REPO\` |
| 🔀 Branch         | \`$BRANCH\` |
| 👤 Author         | \`$ACTOR\` |
| 📝 Commit Message | \`$ESC_COMMIT_MSG\` |
| 🔗 Commit         | [\`$COMMIT_SHA\`]($COMMIT_URL) |
| 📊 Compare        | [View changes]($COMPARE_URL) |
| ⚙️ Workflow Run   | [Run #${RUN_NUM}]($RUN_URL) |
EOF

          echo "Prepared /tmp/details.md:"
          sed -n '1,200p' /tmp/details.md

          # Replace the block between '## 📅 Last Updated' and the next '## ' heading (or EOF).
          if grep -q '^## 📅 Last Updated' "$README"; then
            awk '
              BEGIN { printed=0; skip=0; }
              {
                if ($0 ~ /^## 📅 Last Updated/ && printed==0) {
                  # print the replacement file
                  while ((getline line < "/tmp/details.md") > 0) print line;
                  printed=1;
                  skip=1;
                  next;
                }
                if (skip==1 && $0 ~ /^## /) {
                  # reached next top-level heading -> stop skipping and print this line
                  skip=0;
                  print $0;
                  next;
                }
                if (skip==1) {
                  # inside old block -> skip
                  next;
                }
                # normal line -> print
                print $0;
              }
              END {
                if (printed==0) {
                  # fallback: append the details if heading wasn't found (shouldn't happen)
                  while ((getline line < "/tmp/details.md") > 0) print line;
                }
              }
            ' "$README" > /tmp/README.tmp && mv /tmp/README.tmp "$README"
          else
            # Insert block after first line (under H1) if heading not present
            awk 'NR==1{print; print ""; while ((getline line < "/tmp/details.md") > 0) print line; next}1' "$README" > /tmp/README.tmp && mv /tmp/README.tmp "$README"
          fi

          # Show the diff (for GitHub Actions logs)
          git --no-pager diff -- "$README" || true

      - name: Commit & push if changed
        env:
          GIT_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_NAME: github-actions[bot]
        run: |
          set -euo pipefail

          # README variable is available from GITHUB_ENV
          echo "Using README path: '$README'"

          if [ -z "${README:-}" ] || [ ! -f "${README:-}" ]; then
            echo "README not set or missing; nothing to commit."
            exit 0
          fi

          git config user.email "$GIT_EMAIL"
          git config user.name "$GIT_NAME"

          if git status --porcelain | grep -q "$(basename "$README")"; then
            git add -- "$README"
            git commit -m "chore: update README Last Updated table" || echo "No commit created"
            git push origin HEAD:${{ github.ref_name }}
          else
            echo "No changes in README - nothing to commit."
          fi

# ----------------------------
# If your repo policy blocks GITHUB_TOKEN writing, use the PAT alternative from previous comments.
# ----------------------------
