name: Update README last-updated

permissions:
  contents: write

on:
  push:
    branches: [ main, master ]

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Skip if action itself triggered this run
        if: ${{ github.actor == 'github-actions' }}
        run: |
          echo "Triggered by github-actions, exiting to avoid loop."
          exit 0

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare metadata and update README (Python)
        env:
          TZ: 'Asia/Kolkata'
          GITHUB_EVENT_PATH: ${{ github.event_path }}
        run: |
          set -euo pipefail

          # locate README (customize if you have different path)
          README=README.md
          if [ ! -f "$README" ]; then
            README=Setup/ReadMe-Softwares-List.md
          fi

          if [ ! -f "$README" ]; then
            echo "README not found at expected paths. Exiting."
            exit 0
          fi

          echo "README path: $README"
          echo "README=$README" >> $GITHUB_ENV

          # gather metadata
          NEW_DATE="$(date '+%Y-%m-%d %H:%M %z')"
          REPO="${GITHUB_REPOSITORY}"
          BRANCH="${GITHUB_REF_NAME:-$(echo ${GITHUB_REF} | sed 's#refs/heads/##')}"
          ACTOR="${GITHUB_ACTOR}"
          # short sha (fallback to GITHUB_SHA)
          COMMIT_SHA="$(git rev-parse --short HEAD 2>/dev/null || echo ${GITHUB_SHA:0:7})"
          COMMIT_URL="https://github.com/${REPO}/commit/${COMMIT_SHA}"
          # commit message fallback: try git, else read event payload if present
          COMMIT_MSG="$(git log -1 --pretty=%s 2>/dev/null || (python -c "import json,sys; p=json.load(open('${GITHUB_EVENT_PATH}')); print(p.get('head_commit', {}).get('message',''))" ) )"
          COMPARE_URL="https://github.com/${REPO}/compare/${GITHUB_SHA}^...${GITHUB_SHA}"
          RUN_URL="https://github.com/${REPO}/actions/runs/${GITHUB_RUN_ID}"
          RUN_NUM="${GITHUB_RUN_NUMBER:-${GITHUB_RUN_ID}}"

          # export for python step (redundant since same step runs Python, but keep readability)
          export NEW_DATE REPO BRANCH ACTOR COMMIT_SHA COMMIT_URL COMMIT_MSG COMPARE_URL RUN_URL RUN_NUM README

          # run python to perform safe replacement/insertion
          python - <<'PY'
import io, os, sys, re

readme_path = os.environ['README']
new_date = os.environ['NEW_DATE']
repo = os.environ['REPO']
branch = os.environ['BRANCH']
actor = os.environ['ACTOR']
commit_sha = os.environ['COMMIT_SHA']
commit_url = os.environ['COMMIT_URL']
# commit message might contain newlines or backticks; keep as-is but replace backticks for markdown safety
commit_msg = os.environ.get('COMMIT_MSG','').replace('`', "'")
compare_url = os.environ['COMPARE_URL']
run_url = os.environ['RUN_URL']
run_num = os.environ['RUN_NUM']

table = f"""## 📅 Last Updated

| Field             | Details |
| ----------------- | ------- |
| 🗓️ Date/Time      | `{new_date}` |
| 📦 Repository     | `{repo}` |
| 🔀 Branch         | `{branch}` |
| 👤 Author         | `{actor}` |
| 📝 Commit Message | `{commit_msg}` |
| 🔗 Commit         | [`{commit_sha}`]({commit_url}) |
| 📊 Compare        | [View changes]({compare_url}) |
| ⚙️ Workflow Run   | [Run #{run_num}]({run_url}) |
"""

# Read existing README
with open(readme_path, 'r', encoding='utf-8') as f:
    content = f.read()

heading = "## 📅 Last Updated"
if heading in content:
    # replace heading block: heading until next top-level '## ' or EOF
    # regex: match heading line then any chars until next '\n## ' (positive lookahead) or EOF
    pattern = re.compile(r"(## 📅 Last Updated\\n)(?:.*?)(?=\\n## |\\Z)", re.S)
    # If pattern matches, replace the whole block with our table
    if pattern.search(content):
        new_content = pattern.sub(table.rstrip() , content, count=1)
    else:
        # fallback: append table at end
        new_content = content + "\n\n" + table
else:
    # insert after first H1 (first line that starts with '# '), else prepend
    m = re.search(r"^# .*$", content, flags=re.M)
    if m:
        # insert after that line
        idx = m.end()
        # ensure we insert on a new line
        new_content = content[:idx] + "\n\n" + table + content[idx:]
    else:
        new_content = table + "\n\n" + content

# write back only if changed
if new_content != content:
    with open(readme_path, 'w', encoding='utf-8') as f:
        f.write(new_content)
    print("README updated.")
else:
    print("No changes required to README.")
PY

      - name: Commit & push if changed
        env:
          GIT_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_NAME: github-actions[bot]
        run: |
          set -euo pipefail

          echo "Using README path: $README"

          if [ -z "${README:-}" ] || [ ! -f "${README:-}" ]; then
            echo "README not set or missing; nothing to commit."
            exit 0
          fi

          git config user.email "$GIT_EMAIL"
          git config user.name "$GIT_NAME"

          if git status --porcelain | grep -q "$(basename "$README")"; then
            git add -- "$README"
            git commit -m "chore: update README Last Updated table" || echo "No commit created"
            git push origin HEAD:${{ github.ref_name }}
          else
            echo "No changes in README - nothing to commit."
          fi
